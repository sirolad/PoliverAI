###
# Multi-stage deploy Dockerfile
# - Stage 1 (frontend-build): build the Vite/frontend static assets using Node
# - Stage 2 (python-builder): install Python deps into a venv and copy the app
# - Final stage: based on python:3.11-slim, install nginx, copy static assets and venv
#   and run both uvicorn and nginx in the container. MongoDB is expected to run
#   as a separate service (do not bundle Mongo inside this image).
###

############################################
# Stage: frontend build (Node)
############################################
FROM node:20 AS frontend-build
WORKDIR /app/frontend

# Copy package files early to leverage cache
COPY frontend/package.json frontend/yarn.lock* ./
COPY frontend/ ./

# Install and build frontend (ensure devDependencies like typescript and vite are installed)
# Pass --production=false so devDependencies are installed in the build stage.
RUN yarn install --frozen-lockfile || true
RUN yarn build

############################################
# Stage: python deps builder
############################################
FROM python:3.11-slim AS python-builder
ARG FAST_DEV=true
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# System deps used for building wheels
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential gcc curl ca-certificates python3-venv gnupg2 && rm -rf /var/lib/apt/lists/*

# Upgrade pip/tools, create isolated venv
RUN python3 -m pip install --upgrade pip setuptools wheel virtualenv
RUN python3 -m virtualenv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements files for cached dependency install
COPY requirements.docker.txt requirements.txt requirements.dev.txt /app/

# Install dependencies. Use FAST_DEV flag to install a smaller dev set during iterative builds.
RUN if [ "$FAST_DEV" = "true" ] ; then pip install -r /app/requirements.dev.txt ; else if [ -f /app/requirements.docker.txt ]; then pip install -r /app/requirements.docker.txt; elif [ -f /app/requirements.txt ]; then pip install -r /app/requirements.txt; fi; fi

# Copy the application sources
COPY . /app

############################################
# Final image: Python runtime + nginx serving static + uvicorn backend
############################################
FROM python:3.11-slim AS final
ARG FAST_DEV=false
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# Install nginx and minimal system deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    nginx curl ca-certificates libcap2-bin && rm -rf /var/lib/apt/lists/*

# Copy virtualenv and application from python-builder
COPY --from=python-builder /opt/venv /opt/venv
COPY --from=python-builder /app /app

# Copy built frontend static assets from the frontend-build stage into nginx html dir
RUN rm -rf /usr/share/nginx/html/*
COPY --from=frontend-build /app/frontend/dist /usr/share/nginx/html

# Copy nginx config if present in repo (frontend/nginx.conf) otherwise default nginx will serve static
# Do not overwrite nginx config yet; an entrypoint script will generate one
# at container start so it can use the runtime $PORT value (Cloud Run compatibility)

# Ensure the run script is executable if present
RUN chmod +x ./scripts/run_server.sh || true

# Copy a small entrypoint that generates nginx config at runtime and starts uvicorn + nginx
COPY ./scripts/docker-entrypoint.sh /app/scripts/docker-entrypoint.sh
RUN chmod +x /app/scripts/docker-entrypoint.sh

# Ensure the venv's bin is on PATH
ENV PATH="/opt/venv/bin:$PATH"

# Default PORT for Cloud Run is 8080; allow override via environment when running locally
ENV PORT=8080

# Expose the Cloud Run friendly port and uvicorn port used internally
EXPOSE 8080 8000

# Entrypoint: generate nginx config that listens on $PORT, start uvicorn (127.0.0.1:8000), then run nginx
CMD ["/app/scripts/docker-entrypoint.sh"]
