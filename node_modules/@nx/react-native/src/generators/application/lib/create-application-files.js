"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApplicationFiles = createApplicationFiles;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const path_1 = require("path");
const onboarding_1 = require("nx/src/nx-cloud/utilities/onboarding");
async function createApplicationFiles(host, options) {
    const onBoardingStatus = await (0, onboarding_1.createNxCloudOnboardingURLForWelcomeApp)(host, options.nxCloudToken);
    const connectCloudUrl = onBoardingStatus === 'unclaimed' &&
        (await (0, onboarding_1.getNxCloudAppOnBoardingUrl)(options.nxCloudToken));
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, '../files/app'), options.appProjectRoot, {
        ...options,
        entryFileIos: 'src/main',
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.appProjectRoot),
        rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(host, options.appProjectRoot),
    });
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, `../files/nx-welcome/${onBoardingStatus}`), options.appProjectRoot, {
        ...options,
        connectCloudUrl,
        entryFileIos: 'src/main',
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.appProjectRoot),
        rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(host, options.appProjectRoot),
    });
    if (options.unitTestRunner === 'none') {
        host.delete((0, path_1.join)(options.appProjectRoot, `/src/app/App.spec.tsx`));
    }
    if (options.e2eTestRunner === 'none') {
        host.delete((0, path_1.join)(options.androidProjectRoot, `/app/src/androidTest/java/com/${options.lowerCaseName}/DetoxTest.java`));
    }
    if (options.js) {
        (0, devkit_1.toJS)(host);
    }
}
