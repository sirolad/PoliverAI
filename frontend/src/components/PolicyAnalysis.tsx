import React, { useEffect, useState, useRef } from 'react'
import policyService from '@/services/policyService'
import ReportViewerModal from './ui/ReportViewerModal'
import EnterTitleModal from './ui/EnterTitleModal'
import useAuth from '@/contexts/useAuth'
import type { ComplianceResult } from '@/types/api'
import { Star, StarHalf, Star as StarEmpty } from 'phosphor-react'
import { UploadCloud, CheckCircle2, FileText, AlertTriangle, Lightbulb, BarChart, FileSearch, Star as LucideStar, RefreshCcw, DownloadCloud, ExternalLink, Save, FileCheck } from 'lucide-react'
import InsufficientCreditsModal from './ui/InsufficientCreditsModal'

export default function PolicyAnalysis() {
  const { isAuthenticated, loading, refreshUser } = useAuth()
  const [file, setFile] = useState<File | null>(null)
  const [progress, setProgress] = useState<number>(0)
  const [message, setMessage] = useState<string>('')
  const [result, setResult] = useState<ComplianceResult | null>(null)
  const [reportFilename, setReportFilename] = useState<string | null>(null)
  const [isFullReportGenerated, setIsFullReportGenerated] = useState<boolean>(false)
  const [userReportsCount, setUserReportsCount] = useState<number | null>(null)
  const [showBar, setShowBar] = useState<boolean>(false)
  const fileInputRef = useRef<HTMLInputElement | null>(null)
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false)
  const [modalUrl, setModalUrl] = useState<string | null>(null)
  const [modalFilename, setModalFilename] = useState<string | null>(null)
  const [titleModalOpen, setTitleModalOpen] = useState(false)
  const [titleModalInitial, setTitleModalInitial] = useState<string>('')
  const [insufficientOpen, setInsufficientOpen] = useState(false)
  const saveProgressIntervalRef = useRef<number | null>(null)

  // If progress hits 100 (for any reason) ensure we hide the bar after a short delay
  useEffect(() => {
    if (progress >= 100) {
      const t = setTimeout(() => setShowBar(false), 800)
      return () => clearTimeout(t)
    }
    return undefined
  }, [progress])

  // Clear any running progress interval on unmount
  useEffect(() => {
    return () => {
      if (saveProgressIntervalRef.current) {
        window.clearInterval(saveProgressIntervalRef.current)
        saveProgressIntervalRef.current = null
      }
    }
  }, [])

  // Fetch initial reports count when component mounts or user authenticates
  useEffect(() => {
    if (!isAuthenticated) return
    let mounted = true
    policyService.getUserReportsCount().then((n) => {
      if (mounted) setUserReportsCount(n ?? 0)
    }).catch(() => {})
    return () => { mounted = false }
  }, [isAuthenticated])

  // Listen for report generation events from the streaming service and open the report
  useEffect(() => {
    // When a report is generated by the backend streaming endpoint it will
    // emit a `report_completed` event which the streamingService maps to a
    // `report:generated` DOM event. Capture that and update local state so
    // the right-side panel can show a link / download option.
    const handler = (e: Event) => {
      try {
        const detail = (e as CustomEvent).detail || {}
        const path = detail.path || detail.filename || null
        if (path) {
          const filename = typeof path === 'string' ? path.split('/').pop() as string : String(path)
          setReportFilename(filename)
          // Refresh the user's reports list count so Reports UI stays up-to-date
          policyService.getUserReportsCount().then((n) => setUserReportsCount(n ?? 0)).catch(() => {})
        }
      } catch (err) {
        console.warn('report:generated handler error', err)
      }
    }
    window.addEventListener('report:generated', handler as EventListener)
    return () => window.removeEventListener('report:generated', handler as EventListener)
  }, [])

  if (loading) return <div className="min-h-screen flex items-center justify-center">Loading...</div>
  if (!isAuthenticated) return <div className="min-h-screen flex items-center justify-center">Please login to analyze policies.</div>

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) setFile(e.target.files[0])
  }

  const handleAnalyze = async () => {
    if (!file) return
    setProgress(0)
    setMessage('Starting...')
    setShowBar(true)
    try {
      // any new analysis resets full-report state (it's a quick analysis)
      setIsFullReportGenerated(false)
      const res = await policyService.analyzePolicyStreaming(file, 'balanced', (progressVal, msg) => {
        setProgress(progressVal ?? 0)
        setMessage(msg ?? '')
      })
      setResult(res)
      setMessage('Completed')
      // ensure the bar fills to 100% on completion and then hide shortly after
      setProgress(100)
      // Refresh user so navbar and credits update
      try {
        await refreshUser()
      } catch (e) {
        console.warn('Failed to refresh user after analysis', e)
      }
      // Notify other parts of the app (transactions, navbar) to refresh
      try {
        if (typeof window !== 'undefined' && window.dispatchEvent) {
          window.dispatchEvent(new CustomEvent('payment:refresh-user'))
          window.dispatchEvent(new CustomEvent('transactions:refresh'))
        }
      } catch (e) {
        console.warn('Failed to dispatch refresh events', e)
      }
      setTimeout(() => setShowBar(false), 700)
    } catch (err: unknown) {
      if (err instanceof Error) setMessage(err.message)
      else if (typeof err === 'string') setMessage(err)
      else setMessage('Analysis failed')
      // hide bar on error after a short pause so user can see failure state
      setTimeout(() => setShowBar(false), 700)
    }
  }

  // Animate a progress bar while an async operation is pending. The returned
  // stop function should be called when the operation completes (success/fail)
  const startIndeterminateProgress = (startMessage = 'Working...') => {
    setShowBar(true)
    setMessage(startMessage)
    setProgress(5)
    if (saveProgressIntervalRef.current) {
      window.clearInterval(saveProgressIntervalRef.current)
      saveProgressIntervalRef.current = null
    }
    saveProgressIntervalRef.current = window.setInterval(() => {
      setProgress((cur) => {
        // increase quickly at first, then slow down; never exceed 90
        const inc = cur < 50 ? Math.floor(Math.random() * 6) + 5 : Math.floor(Math.random() * 3) + 1
        return Math.min(90, cur + inc)
      })
    }, 300)
    return () => {
      if (saveProgressIntervalRef.current) {
        window.clearInterval(saveProgressIntervalRef.current)
        saveProgressIntervalRef.current = null
      }
    }
  }

  const handleGenerateReport = async () => {
    if (!result || !file) return
    const stop = startIndeterminateProgress('Generating report...')
    try {
      // call backend to generate a verification report
      const resp = await policyService.generateVerificationReport(result, file.name, 'balanced')
      // set filename returned by backend
      if (resp?.filename) {
        setReportFilename(resp.filename)
        // mark that a true full report was generated
        setIsFullReportGenerated(true)
        // notify other listeners (streaming path expects this event)
        try {
          window.dispatchEvent(new CustomEvent('report:generated', { detail: { path: resp.filename, download_url: resp.download_url } }))
        } catch (e) {
          console.warn('dispatch report:generated failed', e)
        }
      }
      setMessage('Report generated')
      setProgress(100)
      // refresh user's reports list count
      try {
        const n = await policyService.getUserReportsCount()
        setUserReportsCount(n ?? 0)
      } catch {
        console.warn('refresh reports after generate failed')
      }
      // Refresh user (credits) and notify transactions/navbar to reload so
      // the top-right credits update immediately after generation.
      try {
        await refreshUser()
      } catch (e) {
        console.warn('refreshUser after generate failed', e)
      }
      try {
        window.dispatchEvent(new CustomEvent('payment:refresh-user'))
        window.dispatchEvent(new CustomEvent('transactions:refresh'))
      } catch (e) {
        console.warn('dispatch refresh events after generate failed', e)
      }
    } catch (e) {
      console.warn('generate report failed', e)
      // Show insufficient credits modal for 402
      try {
        const anyErr = e as any
        if (anyErr && anyErr.status === 402) {
          setInsufficientOpen(true)
        }
      } catch {
        // ignore
      }
      setMessage(e instanceof Error ? e.message : 'Generate failed')
    } finally {
      stop()
      setTimeout(() => setShowBar(false), 700)
    }
  }

  const handleSaveReport = async (filename?: string, documentName?: string) => {
    if (!filename) return
    const stop = startIndeterminateProgress('Saving report...')
    try {
      // If we didn't generate a full report, this is a quick-save and should charge credits
      const isQuick = !isFullReportGenerated
      const resp = await policyService.saveReport(filename, documentName, { is_quick: isQuick })
      // backend may return normalized filename / download_url
      if (resp?.filename) setReportFilename(resp.filename)
      setMessage('Saved')
      setProgress(100)
      // Refresh count after successful save
      try {
        const n = await policyService.getUserReportsCount()
        setUserReportsCount(n ?? 0)
      } catch (e) {
        console.warn('refresh after save failed', e)
      }
        // Refresh user (credits) and notify transactions UI to reload
        try {
          await refreshUser()
        } catch (e) {
          console.warn('refreshUser after save failed', e)
        }
        try {
          window.dispatchEvent(new CustomEvent('transactions:refresh'))
          window.dispatchEvent(new CustomEvent('payment:refresh-user'))
          window.dispatchEvent(new CustomEvent('reports:refresh'))
        } catch {
          // best-effort
        }
      // Inform other UI parts
      try {
        window.dispatchEvent(new CustomEvent('reports:refresh'))
      } catch {
        // ignore
      }
    } catch (e) {
      console.warn('save report failed', e)
      try {
        const anyErr = e as any
        if (anyErr && anyErr.status === 402) {
          setInsufficientOpen(true)
        }
      } catch {
        // ignore
      }
      setMessage(e instanceof Error ? e.message : 'Save failed')
    } finally {
      stop()
      setTimeout(() => setShowBar(false), 700)
    }
  }


  return (
    <div className="h-screen p-8">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">Policy Analysis</h1>
        {(result || reportFilename) ? (
          <div className="flex items-center gap-2">
            <button
              disabled={!reportFilename}
              onClick={() => {
                if (!reportFilename) return
                const apiBase = import.meta.env.VITE_API_URL || 'http://localhost:8000'
                const url = `${apiBase}/api/v1/reports/download/${encodeURIComponent(reportFilename as string)}`
                setModalUrl(url)
                setModalFilename(reportFilename)
                setIsModalOpen(true)
              }}
              className="px-3 py-1 bg-blue-600 text-white rounded disabled:opacity-50 flex items-center gap-2"
            >
              <ExternalLink className="h-4 w-4"/>Open
            </button>

            <button
              disabled={!reportFilename}
              onClick={async () => {
                if (!reportFilename) return
                try {
                  await policyService.downloadReport(reportFilename as string)
                } catch (e) {
                  console.warn('download failed', e)
                }
              }}
              className="px-3 py-1 bg-gray-100 rounded disabled:opacity-50 flex items-center gap-2"
            >
              <DownloadCloud className="h-4 w-4"/>Download
            </button>

            <button
              onClick={async () => {
                try {
                  const r = await policyService.getUserReports()
                  // r may be legacy array or paged object
                  if (Array.isArray(r)) setUserReportsCount(r.length)
                  else setUserReportsCount(r?.total ?? (r?.reports?.length ?? 0))
                } catch (e) {
                  console.warn('refresh reports failed', e)
                }
              }}
              className="px-3 py-1 bg-white border rounded flex items-center gap-2"
            >
              <RefreshCcw className="h-4 w-4"/>Refresh
            </button>

            <button
              disabled={!result}
              onClick={async () => {
                // Generate a report from the current analysis result
                await handleGenerateReport()
              }}
              className="px-3 py-1 bg-indigo-600 text-white rounded disabled:opacity-50 flex items-center gap-2"
            >
              <FileCheck className="h-4 w-4" />
              Full Report
            </button>

            <button
              disabled={!reportFilename}
              onClick={() => {
                if (!reportFilename) return
                // open title modal so user can provide a document title before saving
                setTitleModalInitial(reportFilename)
                setTitleModalOpen(true)
              }}
              className="px-3 py-1 bg-green-600 text-white rounded disabled:opacity-50 flex items-center gap-2"
            >
              <Save className="h-4 w-4" />
              {isFullReportGenerated ? 'Save Full Report' : 'Save Report (costs credits)'}
            </button>
          </div>
        ) : null}
      </div>
  <InsufficientCreditsModal open={insufficientOpen} onClose={() => setInsufficientOpen(false)} />

      {/* Two-column layout: controls (filters) on left, main result on right */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Left: Main controls / filters */}
        <aside className="md:col-span-1 bg-white p-4 rounded shadow">
          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Upload policy</label>

            {/* Drag & drop area */}
            <div
              onDragOver={(e) => e.preventDefault()}
              onDrop={(e) => {
                e.preventDefault()
                const f = e.dataTransfer?.files?.[0]
                if (f) setFile(f)
              }}
              onClick={() => fileInputRef.current?.click()}
              className="mt-2 h-48 w-full rounded-lg border-2 border-dashed border-blue-200 bg-gradient-to-b from-white/50 to-blue-50 flex flex-col items-center justify-center text-center px-4 cursor-pointer hover:shadow-md transition-shadow"
            >
              <input
                ref={fileInputRef}
                type="file"
                onChange={handleFileChange}
                className="hidden"
                accept=".pdf,.docx,.html,.htm,.txt"
              />
              <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-blue-500 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16v-4a4 4 0 014-4h2a4 4 0 014 4v4m-6 4v-4m0 0l-2 2m2-2l2 2" />
              </svg>
              <div className="text-sm font-medium text-gray-700">Drag & drop a policy file here, or click to browse</div>
              <div className="text-xs text-gray-500 mt-1">Supports PDF, DOCX, HTML, TXT</div>
              <div className="mt-3 flex items-center gap-3">
                <button
                  type="button"
                  onClick={(e) => { e.stopPropagation(); fileInputRef.current?.click() }}
                  className="bg-white border border-blue-200 text-blue-700 px-3 py-1 rounded-md shadow-sm hover:bg-blue-50 flex items-center"
                >
                  <UploadCloud className="h-4 w-4 mr-2" />
                  Browse files
                </button>
                {file ? (
                  <button
                    type="button"
                    onClick={(e) => { e.stopPropagation(); setFile(null) }}
                    className="text-sm text-red-600 underline"
                  >
                    Remove
                  </button>
                ) : null}
              </div>
            </div>

            {/* File meta display */}
            {file && (
              <div className="mt-3 text-sm text-gray-700">
                <div className="font-medium">Selected file</div>
                <div className="text-xs text-gray-500">{file.name} • {Math.round((file.size || 0) / 1024)} KB • {file.type || 'n/a'}</div>
              </div>
            )}
          </div>

          <div className="mb-4">
            <button onClick={handleAnalyze} className="w-full bg-blue-600 text-white px-4 py-2 rounded flex items-center justify-center"><BarChart className="h-4 w-4 mr-2"/>Analyze</button>
          </div>
          <div className="mb-2 text-xs text-gray-500">Quick analysis is free. Saving a quick report will cost credits.</div>

          <div className="mb-4">
            <div className="text-sm font-medium">Progress: {progress}%</div>

            {/* Inline bar directly beneath the progress label */}
            {showBar && (
              <div className="mt-2 w-full">
                <div className="h-2 w-full bg-gray-200 rounded-full overflow-hidden">
                  <div
                    className={`h-2 rounded-full bg-gradient-to-r from-blue-500 to-blue-700 transition-all duration-500 ease-out ${
                      progress < 5 ? 'opacity-90 animate-pulse' : ''
                    }`}
                    style={{ width: progress < 5 ? '25%' : `${Math.min(100, Math.max(2, progress))}%` }}
                    role="progressbar"
                    aria-valuemin={0}
                    aria-valuemax={100}
                    aria-valuenow={Math.min(100, Math.max(0, progress))}
                  />
                </div>
              </div>
            )}

            <div className="text-sm text-gray-600 mt-2">{message}</div>
          </div>

          {/* Additional controls / filters can go here to match transaction history layout */}
          <div className="mt-4 text-xs text-gray-500">Tip: You first need to upload a policy document before analyzing.</div>



          <div className="mt-4">
            <h3 className="font-semibold">Summary</h3>
            <div className="text-sm text-gray-700 mt-2">{result?.summary || 'No result yet'}</div>
          </div>



              <div className="mb-4">
                <h3 className="font-semibold">Findings ({result?.findings?.length ?? 0})</h3>
                <div className="text-sm text-gray-700 mt-2 max-h-40 overflow-auto">
                  {result?.findings && result.findings.length > 0 ? (
                    <ul className="list-disc pl-5 space-y-2">
                      {result.findings.map((f, idx) => (
                        <li key={idx} className="text-sm break-words whitespace-normal">
                          <span className="font-medium">Article {f.article}:</span> <span className="break-words whitespace-normal">{f.issue}</span>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <div className="text-sm text-gray-500">No findings</div>
                  )}
                </div>
              </div>

              <div className="mb-4">
                <h3 className="font-semibold">Total Saved Past Reports {userReportsCount !== null ? `(${userReportsCount} total)` : ''}</h3>
                <div className="mt-2">
                  {reportFilename ? (
                    <div className="space-y-2">
                      <div className="text-sm">Generated: <span className="font-medium">{reportFilename}</span></div>
                    </div>
                  ) : (
                    <div className="text-sm text-gray-500">No report generated yet</div>
                  )}
                </div>
              </div>
        </aside>

        {/* Right: Main result area */}
        <main className="md:col-span-2 bg-white p-4 rounded shadow flex flex-col min-h-0 overflow-hidden">
          <div className="mb-4 flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold">Analysis Result</h2>
              <div className="text-sm text-gray-600">Result JSON / report preview</div>
            </div>
            <div className="text-sm text-gray-600">{result ? `${result.verdict} • Score ${result.score}` : ''}</div>
          </div>

            <div className="h-full flex-1 min-h-0">
              {result ? (
                <div className="bg-gray-50 p-4 rounded h-full min-h-0 overflow-auto w-full">
                  <div className="flex items-start justify-between gap-6">
                    <div>
                      <div className="text-sm text-gray-500 flex items-center gap-2"><CheckCircle2 className="h-4 w-4 text-green-600" />Verdict</div>
                      <div className="mt-1 flex items-center gap-3">
                        <div className="text-lg font-semibold">{String(result.verdict).replace(/_/g, ' ').replace(/\b\w/g, (c) => c.toUpperCase())}</div>
                        <div className="text-sm text-gray-500">Confidence: {(result.confidence * 100).toFixed(0)}%</div>
                      </div>
                    </div>
                    <div className="flex items-center gap-6">
                      <div className="text-sm text-gray-500 flex items-center gap-2"><LucideStar className="h-4 w-4 text-yellow-500" />Score</div>
                      <div className="flex items-center gap-3">
                        <div className="flex items-center gap-1">
                          {(() => {
                            const score = typeof result.score === 'number' ? Math.max(0, Math.min(100, result.score)) : 0
                            const stars = (score / 100) * 5
                            const full = Math.floor(stars)
                            const half = stars - full >= 0.5 ? 1 : 0
                            const empty = 5 - full - half
                            const icons: JSX.Element[] = []
                            for (let i = 0; i < full; i++) icons.push(<Star key={`f-${i}`} size={18} weight="fill" className="text-yellow-500" />)
                            if (half) icons.push(<StarHalf key={`h`} size={18} className="text-yellow-500" />)
                            for (let i = 0; i < empty; i++) icons.push(<StarEmpty key={`e-${i}`} size={18} weight="duotone" className="text-gray-300" />)
                            return <div className="flex items-center">{icons}</div>
                          })()}
                        </div>
                        <div className="text-sm text-gray-600">{result.score}%</div>
                      </div>
                    </div>
                  </div>

                  <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="md:col-span-2">
                      <div className="text-sm font-medium text-gray-700 flex items-center gap-2"><FileText className="h-4 w-4 text-gray-600"/>Summary</div>
                      <div className="mt-2 text-sm text-gray-800 whitespace-pre-wrap">{result.summary}</div>

                      <div className="mt-4">
                        <div className="text-sm font-medium text-gray-700 flex items-center gap-2"><AlertTriangle className="h-4 w-4 text-red-500"/>Top Findings</div>
                        <div className="mt-2 space-y-3">
                          {result.findings && result.findings.length > 0 ? (
                            // Show up to 5 findings per severity, grouped by severity with colored cards
                            ['high', 'medium', 'low'].map((sev) => {
                              const items = result.findings.filter(f => f.severity === sev)
                              if (items.length === 0) return null
                              const bg = sev === 'high' ? 'bg-red-600' : sev === 'medium' ? 'bg-yellow-600' : 'bg-green-600'
                              const pill = sev === 'high' ? 'bg-red-700' : sev === 'medium' ? 'bg-yellow-700' : 'bg-green-700'
                              return (
                                <div key={sev}>
                                  <div className="flex items-center gap-2">
                                    <div className={`px-2 py-0.5 rounded text-xs font-semibold text-white ${pill}`}>{sev.toUpperCase()}</div>
                                    <div className="text-xs text-gray-500">{items.length} issue{items.length !== 1 ? 's' : ''}</div>
                                  </div>
                                  <div className="mt-2 space-y-2">
                                    {items.slice(0, 5).map((f, idx) => (
                                      <div key={idx} className={`${bg} p-3 rounded shadow`}>
                                        <div className="flex items-start gap-3">
                                          <div className="p-2 rounded bg-white/10 flex-shrink-0">
                                            <FileText className="h-5 w-5 text-white" />
                                          </div>
                                          <div className="flex-1 min-w-0">
                                            <div className="font-semibold text-sm text-white break-words">{f.article}</div>
                                            <div className="text-sm text-white mt-1 break-words whitespace-pre-wrap">{f.issue}</div>
                                            <div className="text-xs text-white/90 mt-1">Confidence: {(f.confidence * 100).toFixed(0)}%</div>
                                          </div>
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )
                            })
                          ) : (
                            <div className="text-sm text-gray-500">No findings detected.</div>
                          )}
                        </div>
                      </div>

                      <div className="mt-4">
                        <div className="text-sm font-medium text-gray-700 flex items-center gap-2"><Lightbulb className="h-4 w-4 text-yellow-600"/>Recommendations</div>
                        <ul className="mt-2 list-disc list-inside text-sm text-gray-800">
                          {result.recommendations && result.recommendations.length > 0 ? (
                            result.recommendations.map((r, i) => (
                              <li key={i}>{r.suggestion} <span className="text-xs text-gray-500">({r.article})</span></li>
                            ))
                          ) : (
                            <li className="text-sm text-gray-500">No recommendations</li>
                          )}
                        </ul>
                      </div>
                    </div>

                    <aside className="md:col-span-1">
                      <div className="text-sm font-medium text-gray-700 flex items-center gap-2"><BarChart className="h-4 w-4 text-blue-600"/>Metrics</div>
                      <div className="mt-2 space-y-2 text-sm text-gray-700">
                        <div>Total Violations: <span className="font-semibold">{result.metrics?.total_violations ?? 0}</span></div>
                        <div>Requirements Met: <span className="font-semibold">{result.metrics?.total_fulfills ?? 0}</span></div>
                        <div>Critical Violations: <span className="font-semibold text-red-600">{result.metrics?.critical_violations ?? 0}</span></div>
                      </div>

                      <div className="mt-4">
                        <div className="text-sm font-medium text-gray-700 flex items-center gap-2">
                          <FileSearch className="h-4 w-4 text-gray-600"/>
                          <span>Evidence</span>
                          <div className="px-2 py-0.5 rounded text-xs text-gray-500 bg-gray-100">{`(${result.evidence?.length ?? 0})`}</div>
                        </div>
                        <div className="mt-2 space-y-2 text-sm text-gray-700">
                            {result.evidence && result.evidence.length > 0 ? (
                            result.evidence.slice(0, 6).map((e, i) => (
                              <div key={i} className="p-3 rounded shadow bg-green-700 text-white">
                                <div className="flex items-start gap-3">
                                  <div className="p-2 rounded bg-white/10 flex-shrink-0">
                                    <FileText className="h-5 w-5 text-white" />
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <div className="font-semibold break-words">{e.article}</div>
                                    <div className="text-xs mt-1 whitespace-pre-wrap break-words">{e.policy_excerpt}</div>
                                  </div>
                                </div>
                              </div>
                            ))
                          ) : (
                            <div className="text-sm text-gray-500">No evidence excerpts</div>
                          )}
                        </div>
                      </div>
                    </aside>
                  </div>
                </div>
              ) : (
                <div className="h-full w-full flex items-center justify-center">
                  <div className="text-center p-6">
                    <div className="mx-auto w-24 h-24 flex items-center justify-center rounded-full bg-gray-100">
                      <UploadCloud className="h-10 w-10 text-gray-500" />
                    </div>
                    <div className="mt-4 text-lg font-semibold">No analysis yet</div>
                    <div className="mt-2 text-sm text-gray-500">Upload a policy file and click <span className="font-medium">Analyze</span> to run a quick analysis. Once complete you can generate a full report or save results.</div>
                    <div className="mt-4 flex items-center justify-center gap-3">
                      <button
                        className="px-4 py-2 bg-white border rounded flex items-center gap-2"
                        onClick={() => fileInputRef.current?.click()}
                      >
                        <UploadCloud className="h-4 w-4" />
                        Upload File
                      </button>
                      <button
                        disabled={!file}
                        className="px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50 flex items-center gap-2"
                        onClick={handleAnalyze}
                      >
                        <BarChart className="h-4 w-4" />
                        Analyze
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
        </main>

      {/* Modal viewer for reports */}
      {isModalOpen && modalUrl ? (
        <ReportViewerModal
          reportUrl={modalUrl}
          filename={modalFilename}
          title={isFullReportGenerated ? 'Full Report' : (modalFilename || 'Report')}
          isQuick={!isFullReportGenerated}
          onClose={() => setIsModalOpen(false)}
          onSaved={(fn) => {
            setIsModalOpen(false)
            setReportFilename(fn)
            policyService.getUserReportsCount().then((n) => setUserReportsCount(n ?? 0)).catch(() => {})
            // Refresh user so credits reflect any deduction
            try { refreshUser().catch(() => {}) } catch { /* ignore */ }
          }}
          onDeleted={(fn) => {
            setIsModalOpen(false)
            // Refresh list count and clear filename if deleted
            setReportFilename((cur) => (cur === fn ? null : cur))
            policyService.getUserReportsCount().then((n) => setUserReportsCount(n ?? 0)).catch(() => {})
          }}
        />
      ) : null}

      {/* Title modal for saving directly from analysis view */}
      {titleModalOpen ? (
        <EnterTitleModal
          open={titleModalOpen}
          initial={titleModalInitial}
          onClose={() => setTitleModalOpen(false)}
          onConfirm={async (title) => {
            // Delegate save behavior to handleSaveReport so the save/save-refresh
            // logic is centralized and the function is actually used (avoids unused-var warnings).
            if (!reportFilename) return
            try {
              await handleSaveReport(reportFilename as string, title)
            } catch (e) {
              console.warn('save from title modal failed', e)
            } finally {
              setTitleModalOpen(false)
              try { window.dispatchEvent(new CustomEvent('transactions:refresh')) } catch (err) { console.warn('dispatch transactions refresh failed', err) }
            }
          }}
        />
      ) : null}

      </div>
    </div>
  )
}
