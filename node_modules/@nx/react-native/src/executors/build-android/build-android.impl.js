"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = buildAndroidExecutor;
const path_1 = require("path");
const child_process_1 = require("child_process");
const chmod_android_gradle_files_1 = require("../../utils/chmod-android-gradle-files");
const get_cli_options_1 = require("../../utils/get-cli-options");
async function* buildAndroidExecutor(options, context) {
    const projectRoot = context.projectsConfigurations.projects[context.projectName].root;
    (0, chmod_android_gradle_files_1.chmodAndroidGradlewFiles)((0, path_1.join)(context.root, projectRoot, 'android'));
    await runCliBuild(context.root, projectRoot, options);
    yield { success: true };
}
function runCliBuild(workspaceRoot, projectRoot, options) {
    return new Promise((res, reject) => {
        const childProcess = (0, child_process_1.fork)(require.resolve('react-native/cli.js'), ['build-android', ...createBuildAndroidOptions(options)], {
            stdio: 'inherit',
            cwd: (0, path_1.resolve)(workspaceRoot, projectRoot),
            env: { ...process.env, RCT_METRO_PORT: options.port.toString() },
        });
        /**
         * Ensure the child process is killed when the parent exits
         */
        const processExitListener = (signal) => () => {
            childProcess.kill(signal);
            process.exit();
        };
        process.once('exit', (signal) => childProcess.kill(signal));
        process.once('SIGTERM', processExitListener);
        process.once('SIGINT', processExitListener);
        process.once('SIGQUIT', processExitListener);
        childProcess.on('error', (err) => {
            reject(err);
        });
        childProcess.on('exit', (code) => {
            if (code === 0) {
                res(childProcess);
            }
            else {
                reject(code);
            }
        });
    });
}
const startOptions = ['port', 'resetCache'];
function createBuildAndroidOptions(options) {
    return (0, get_cli_options_1.getCliOptions)(options, startOptions);
}
